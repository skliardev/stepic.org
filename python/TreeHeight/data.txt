Enter data plz:
10
9 7 5 5 2 9 9 9 2 -1

This statistic:
cache: {0: 2, 1: 3, 2: 3, 3: 3, 5: 2, 6: 2, 7: 2, 9: 1}
cache used: 2
height: 4
-------------------------------------------------------
Enter data plz:
10
2 2 3 5 5 7 7 9 9 -1

This statistic:
cache: {0: 6, 1: 6, 2: 5, 3: 4, 4: 4, 5: 3, 6: 3, 7: 2, 8: 2, 9: 1}
cache used: 0
height: 6
-------------------------------------------------------
Дальнейшее исследование показало, что кеш используется очень мало.
Если использовать кеш так, что при прохождении вершины мы добавляем ее в список и когда дойдем до вершины,
то добавлять вершины и их длинны в кеш можно так

    cache[index] = height - len(stack), где
    index - позиция вершины в списке(стеке, организованного для поиска вершины дерева)
    height - вычислинная длинна для текущего маршрута обхода, т.е. от выбранной вершины до вершины дерева
    cache - кеш для записи вершин и их длинн, для исключения повторного обхода

Далее, что бы не обходить вершины снова, мы просто будем использовать уже найденные из кеша

    height = max(height, len(stack) + cache[next]), где
    next - предок выбранной в данный момент вершины (next = tree[element])
    stack - стек организованный для поиска длинны от выбранной вершины до вершины дерева
    tree - структура нашего дерева (дерево по родителям)
    element - выбранный в данный момент элемент

! Так же нужно исключить вершины у которых нет наследников (не реализованно)
-------------------------------------------------------
Без проверки на единичные запросы
-------------------------------------------------------
Enter data plz:
10
9 7 5 5 2 9 9 9 2 -1

This statistic:
cache: {0: 2, 9: 1, 1: 3, 7: 2, 2: 3, 5: 2, 3: 3, 4: 4, 6: 2, 8: 4}
cache used: 8
cache writing: 13
Vertex jumping: 3
Total use: 16
height: 4
-------------------------------------------------------
Enter data plz:
10
2 2 3 5 5 7 7 9 9 -1

This statistic:
cache: {0: 6, 2: 5, 3: 4, 5: 3, 7: 2, 9: 1, 1: 6, 4: 4, 6: 3, 8: 2}
cache used: 8
cache writing: 15
Vertex jumping: 5
Total use: 20
height: 6
-------------------------------------------------------
Enter data plz:
0
-1

This statistic:
cache: {0: 1}
cache used: 0
cache writing: 1
Vertex jumping: 0
Total use: 1
height: 1
-------------------------------------------------------
C проверкой на единичные запросы
-------------------------------------------------------
Enter data plz:
10
9 7 5 5 2 9 9 9 2 -1

This statistic:
cache: {0: 2, 9: 1, 1: 3, 7: 2, 2: 3, 5: 2}
cache used: 8
cache writing: 6
Vertex jumping: 3
Total use: 9
height: 4
-------------------------------------------------------
Enter data plz:
10
2 2 3 5 5 7 7 9 9 -1

This statistic:
cache: {0: 6, 2: 5, 3: 4, 5: 3, 7: 2, 9: 1}
cache used: 8
cache writing: 6
Vertex jumping: 5
Total use: 11
height: 6
-------------------------------------------------------
Enter data plz:
0
-1

This statistic:
cache: {}
cache used: 0
cache writing: 0
Vertex jumping: 0
Total use: 0
height: 1
-------------------------------------------------------
Как можно видеть